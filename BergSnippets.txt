            Console.WriteLine($"CPUPerformanceDataUpdate - {DateTime.Now.ToString("HH:mm:ss")}");
			
                //Console.WriteLine($"LPU 0 - {CpuData.LogicalCores[0].PercentProcessorTime}{Environment.NewLine}" +
                //                  $"LPU 1 - {CpuData.LogicalCores[1].PercentProcessorTime}\n" +
                //                  $"LPU 2 - {CpuData.LogicalCores[2].PercentProcessorTime}\n" +
                //                  $"LPU 3 - {CpuData.LogicalCores[3].PercentProcessorTime}\n" +
                //                  $"LPU 4 - {CpuData.LogicalCores[4].PercentProcessorTime}\n" +
                //                  $"LPU 5 - {CpuData.LogicalCores[5].PercentProcessorTime}\n" +
                //                  $"LPU 6 - {CpuData.LogicalCores[6].PercentProcessorTime}\n" +
                //                  $"LPU 7 - {CpuData.LogicalCores[7].PercentProcessorTime}\n");
				
				foreach (var property in systemItem.Properties)
                {
                    Console.WriteLine($"{property.Name} - {property.Value}");
                }
				
				
				
            foreach (var systemItem in ManagementObjectSearcher.Get())
            {
                foreach (var property in systemItem.Properties)
                {
                    Console.WriteLine($"{property.Name} - {property.Value}");
                }
            }


                loadingControl.Visible = true;
                loadingControl.Active = true;
                loadingControl.BringToFront();
                await Task.Run(() => Thread.Sleep(5000));
                loadingControl.Active = false;
                loadingControl.SendToBack();
                loadingControl.Visible = false;		

		
		// Explicit Serialization
		        #region Serialize
        protected byte[] Serialize()
        {
            using (MemoryStream memoryStream = new MemoryStream())
            {
                using (BinaryWriter writer = new BinaryWriter(memoryStream))
                {
                    writer.Write(CoreCount ?? string.Empty);
                    writer.Write(CurrentClockSpeed ?? string.Empty);
                    writer.Write(L2CacheSize ?? string.Empty);
                    writer.Write(L3CacheSize ?? string.Empty);
                    writer.Write(LoadPercentage ?? string.Empty);
                    writer.Write(LogicalProcessorsCount ?? string.Empty);
                    writer.Write(MaxClockSpeed ?? string.Empty);
                    writer.Write(Name ?? string.Empty);
                    writer.Write(Status ?? string.Empty);
                    writer.Write(ThreadCount ?? string.Empty);
                    writer.Write(TotalCPU ?? string.Empty);
                    writer.Write(TotalUserCPU ?? string.Empty);
                    //public List<LogicalCore> LogicalCores );

                    // Performance Watches
                    foreach (var watch in PerformanceWatchCollection)
                    {
                        writer.Write(watch.Value.Serialize());
                    }
                }

                return memoryStream.ToArray();
            }
        }
        #endregion Serialize
		
		        #region Deserialize
        public static CpuPerformanceData Deserialize(byte[] data)
        {
            CpuPerformanceData Result = new CpuPerformanceData();

            if (data.Length > 0)
            {
                using (MemoryStream memoryStream = new MemoryStream(data))
                {
                    using (BinaryReader reader = new BinaryReader(memoryStream))
                    {
                        Result.CoreCount = reader.ReadString();
                        Result.CurrentClockSpeed = reader.ReadString();
                        Result.L2CacheSize = reader.ReadString();
                        Result.L3CacheSize = reader.ReadString();
                        Result.LoadPercentage = reader.ReadString();
                        Result.LogicalProcessorsCount = reader.ReadString();
                        Result.MaxClockSpeed = reader.ReadString();
                        Result.Name = reader.ReadString();
                        Result.Status = reader.ReadString();
                        Result.ThreadCount = reader.ReadString();
                        Result.TotalCPU = reader.ReadString();
                        Result.TotalUserCPU = reader.ReadString();

                        // Performance Watches
                        //var BinaryFormatter = new BinaryFormatter();
                        //Result.PerformanceWatchList = (Dictionary<string, PerformanceWatch>)BinaryFormatter.Deserialize(memoryStream);
                    }
                }
            }

            return Result;
        }
        #endregion Deserialize

